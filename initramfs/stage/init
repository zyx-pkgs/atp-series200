#!/bin/sh
PATH="/bin:/sbin:/usr/bin:/usr/sbin"
BB="/bin/busybox"
MSGTAG_INITRAMFS="INITRAMFS"


echo ""
echo " ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- "
echo "${MSGTAG_INITRAMFS}: starting..."
echo " ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- "

# initialiaze busybox symlinks
[ -d /bin ] || $BB mkdir -p /bin
[ -d /sbin ] || $BB mkdir -p /sbin
[ -d /usr/bin ] || $BB mkdir -p /usr/bin
[ -d /usr/sbin ] || $BB mkdir -p /usr/sbin

/bin/busybox --install -s


# /proc still needs to be mounted before the symlinks will work
[ -d /proc ] || $BB mkdir /proc
[ -e /proc/cmdline ] || $BB mount -t proc -o nodev,noexec,nosuid proc /proc

# Prepare /sys
[ -d /sys ] || mkdir /sys
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys

# Prepare /dev
[ -d /dev ] || mkdir -m 0755 /dev
mount -t tmpfs -o size=5%,mode=0755 udev /dev
[ -e /dev/null ] || mknod /dev/null c 1 3
[ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1

# Prepare /dev/pts
[ -d /dev/pts ] || mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

# Populate /dev
echo "/bin/mdev" > /proc/sys/kernel/hotplug
mdev -s

[ -d /tmp ] || $BB mkdir /tmp


# Source functions
. /scripts/functions

# Set defaults
# Export relevant variables
export ROOT=
export ROOTDELAY=
export ROOTFLAGS=
export ROOTFSTYPE=
export IP=
export BOOT=
export BOOTIF=
export UBIMTD=
export break=
export init=/sbin/init
export roflag=-r
export rootmnt=/root
export panic=


[ -d $rootmnt ] || $BB mkdir $rootmnt


# Parse command line options
for x in $(cat /proc/cmdline); do
	case $x in
	init=*)
		init=${x#init=}
		;;
	root=*)
		ROOT=${x#root=}
		case $ROOT in
		LABEL=*)
			ROOT="${ROOT#LABEL=}"

			# support any / in LABEL= path (escape to \x2f)
			case "${ROOT}" in
			*/*)
				ROOT="$(echo ${ROOT} | sed 's,/,\\x2f,g')"
			esac
			ROOT=$(findfs LABEL=$ROOT)
			;;
		UUID=*)
			ROOT=$(findfs UUID=${ROOT#UUID=})
			;;
		/dev/nfs)
			[ -z "${BOOT}" ] && BOOT=nfs
			;;
		esac
		;;
	rootflags=*)
		ROOTFLAGS="-o ${x#rootflags=}"
		;;
	rootfstype=*)
		ROOTFSTYPE="${x#rootfstype=}"
		;;
	rootdelay=*)
		ROOTDELAY="${x#rootdelay=}"
		case ${ROOTDELAY} in
		*[![:digit:].]*)
			ROOTDELAY=
			;;
		esac
		;;
	nfsroot=*)
		NFSROOT="${x#nfsroot=}"
		;;
	ip=*)
		IP="${x#ip=}"
		;;
	boot=*)
		BOOT=${x#boot=}
		;;
	ubi.mtd=*)
		UBIMTD=${x#ubi.mtd=}
		;;
	panic=*)
		panic="${x#panic=}"
		case ${panic} in
		*[![:digit:].]*)
			panic=
			;;
		esac
		;;
	ro)
		roflag=-r
		;;
	rw)
		roflag=-w
		;;
	break=*)
		break=${x#break=}
		;;
	break)
		break=premount
		;;
	netconsole=*)
		netconsole=${x#netconsole=}
		;;
	BOOTIF=*)
		BOOTIF=${x#BOOTIF=}
		;;
	esac
done

# Default to BOOT=local, nfs not yet supported.
BOOT=local


maybe_break top
run_scripts /scripts/init-top

maybe_break modules
load_modules

[ -n "${netconsole}" ] && modprobe netconsole netconsole="${netconsole}"

maybe_break premount
run_scripts /scripts/init-premount

maybe_break mount
. /scripts/${BOOT}
maybe_break mountroot
mountroot

maybe_break bottom
run_scripts /scripts/init-bottom


####################
validate_init() {
	checktarget="${1}"

	# Work around absolute symlinks
	if [ -d "${rootmnt}" ] && [ -h "${rootmnt}${checktarget}" ]; then
		case $(readlink "${rootmnt}${checktarget}") in /*)
			checktarget="$(chroot ${rootmnt} readlink ${checktarget})"
			;;
		esac
	fi

	# Make sure the specified init can be executed
	if [ ! -x "${rootmnt}${checktarget}" ]; then
		return 1
	fi

	# Upstart uses /etc/init as configuration directory :-/
	if [ -d "${rootmnt}${checktarget}" ]; then
		return 1
	fi
}

# Check init bootarg
if [ -n "${init}" ]; then
        if ! validate_init "$init"; then
                panic "${MSGTAG_INITRAMFS}: TARGET filesystem doesn't have requested ${init}."
        fi
fi


maybe_break init

# Clean up env
unset ROOTFLAGS
unset ROOTFSTYPE
unset ROOTDELAY
unset ROOT
unset IP
unset BOOT
unset BOOTIF
unset UBIMTD
unset break
unset panic




# Reset kernel hotplugging
echo "" > /proc/sys/kernel/hotplug

# Umount /sys
umount /sys

# Umount /dev tree
umount /dev/pts && umount /dev

# Umount /proc
umount /proc




echo " ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- "
echo "${MSGTAG_INITRAMFS}: trying to switch_root..."
echo " ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- "

# switch_root
if ! exec switch_root -c /dev/console ${rootmnt} ${init}
then
    panic "${MSGTAG_INITRAMFS}: ERROR: exec switch_root -c /dev/console ${rootmnt} ${init}"
fi

panic "${MSGTAG_INITRAMFS}: FATAL: Should never reach this point !"
